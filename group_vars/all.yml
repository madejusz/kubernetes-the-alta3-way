---
nodes:
- node-0
- node-1
- node-2

# python
ansible_python_interpreter: "/usr/bin/python3"

# control flow
run_all: True
run_makecerts: "{{ run_all }}"
run_nodeconfig: "{{ run_all }}"
run_localconfig: "{{ run_all }}"
run_services: "{{ run_all }}"
run_bootstrap: "{{ run_all }}"
run_etcd: "{{ run_all }}"
run_master: "{{ run_all }}"
run_nginx_lb: "{{ run_all }}"
run_nodes: "{{ run_all }}"
run_rbac: "{{ run_all }}"
run_trusted_ca: "{{ run_all }}"

# versions
k8s_version: "1.18.0"
etcd_version: "3.4.6"
cni_version: "0.8.5"
containerd_version: "1.3.3"
cri_tools_version: "1.17.0"
cfssl_version: "1.4.1"
runc_version: "1.0.0-rc8"
coredns_version: "1.6.9"
calico_version: "3.13.1"

# cluster specifics
cluster_name: "kubernetes-the-alta3-way"
cluster_cidr: "192.168.0.0/16"
upstream_dns: "10.0.0.1"
service_cluster_ip_range: "172.16.3.0/24"
service_cluster_port_range: "30000-32767"
apiserver_cluster_ip: "172.16.3.1"
dns_cluster_ip: "172.16.3.10"

# dependencies and their destinations
cfssl_source_url: "https://github.com/cloudflare/cfssl/releases/download"
cfssl_url: "{{ cfssl_source_url }}/v{{ cfssl_version }}/cfssl_{{ cfssl_version }}_linux_amd64"
cfssljson_url: "{{ cfssl_source_url }}/v{{ cfssl_version }}/cfssljson_{{ cfssl_version }}_linux_amd64"

# masters, nodes and localhost all need kubectl
kubectl:
  url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kubectl"
  path: "/usr/local/bin/kubectl"

# config and cert dirs
localhost_home_dir: "{{ lookup('env', 'HOME') }}"
cert_dir: "{{ localhost_home_dir }}/k8s-certs"
config_dir: "{{ localhost_home_dir }}/k8s-config"
systemd_dir: "/etc/systemd/system"

# csr config
csr_dir: "{{ config_dir }}/csr/"
country_csr: US
city_csr: Harrisburg
state_csr: Pennsylvania
ou_csr: Kubernetes The Alta3 Way

# cert and misc config files
ca_config_file: "{{ config_dir }}/ca-config.json"
encryption_config_file: "{{ config_dir }}/encryption-config.yaml"
kube_scheduler_config_file: "{{ config_dir }}/kube-scheduler.yaml"

kube_scheduler_kubeconfig_file: "{{ config_dir }}/kube-scheduler.kubeconfig"
kube_controller_manager_kubeconfig_file: "{{ config_dir }}/kube-controller-manager.kubeconfig"

k8s_certs_list:
 - "ca"
 - "admin"
 - "kube-controller-manager"
 - "kube-proxy"
 - "kube-scheduler"
 - "kubernetes"
 - "registry-web"
 - "front-proxy-client"

ca_crt: "ca.pem"
ca_key: "ca-key.pem"
k8s_crt: "kubernetes.pem"
k8s_key: "kubernetes-key.pem"
encryption_config: "encryption-config.yaml"
kube_scheduler_crt: "kube-scheduler.pem"
kube_scheduler_key: "kube-scheduler-key.pem"
kube_scheduler_config: "kube-scheduler.yaml"
kube_scheduler_kubeconfig: "kube-scheduler.kubeconfig"
kube_controller_manager_kubeconfig: "kube-controller-manager.kubeconfig"
kube_controller_manager_crt: "kube-controller-manager.pem"
kube_controller_manager_key: "kube-controller-manager-key.pem"
front_proxy_client_crt: "front-proxy-client.pem"
front_proxy_client_key: "front-proxy-client-key.pem"

# generated cert and key files
ca_pem_file: "{{ cert_dir }}/ca.pem"
ca_key_file: "{{ cert_dir }}/ca-key.pem"
k8s_pem_file: "{{ cert_dir }}/kubernetes.pem"
k8s_key_file: "{{ cert_dir }}/kubernetes-key.pem"
admin_pem_file: "{{ cert_dir }}/admin.pem"
admin_key_file: "{{ cert_dir }}/admin-key.pem"
kube_proxy_pem_file: "{{ cert_dir }}/kube-proxy.pem"
kube_proxy_key_file: "{{ cert_dir }}/kube-proxy-key.pem"
kube_controller_manager_pem_file: "{{ cert_dir }}/kube-controller-manager.pem"
kube_controller_manager_key_file: "{{ cert_dir }}/kube-controller-manager-key.pem"
kube_scheduler_pem_file: "{{ cert_dir }}/kube-scheduler.pem"
kube_scheduler_key_file: "{{ cert_dir }}/kube-scheduler-key.pem"
registry_web_pem_file: "{{ cert_dir }}/registry-web.pem"
registry_web_key_file: "{{ cert_dir }}/registry-web-key.pem"
front_proxy_client_pem_file: "{{ cert_dir }}/front-proxy-client.pem"
front_proxy_client_key_file: "{{ cert_dir }}/front-proxy-client-key.pem"

# master and node certificates
deployed_k8s_config_dir: "/var/lib/kubernetes"
deployed_ca_pem_file: "{{ deployed_k8s_config_dir }}/ca.pem"
deployed_ca_key_file: "{{ deployed_k8s_config_dir }}/ca-key.pem"
deployed_k8s_pem_file: "{{ deployed_k8s_config_dir }}/kubernetes.pem"
deployed_k8s_key_file: "{{ deployed_k8s_config_dir }}/kubernetes-key.pem"
deployed_encryption_config_file: "{{ deployed_k8s_config_dir }}/encryption-config.yaml"
deployed_kube_scheduler_pem_file: "{{ deployed_k8s_config_dir }}/kube-scheduler.pem"
deployed_kube_scheduler_key_file: "{{ deployed_k8s_config_dir }}/kube-scheduler-key.pem"
deployed_kube_scheduler_config_file: "{{ deployed_k8s_config_dir }}/kube-scheduler.yaml"
deployed_kube_scheduler_kubeconfig_file: "{{ deployed_k8s_config_dir }}/kube-scheduler.kubeconfig"
deployed_kube_controller_manager_kubeconfig_file: "{{ deployed_k8s_config_dir }}/kube-controller-manager.kubeconfig"
deployed_kube_controller_manager_pem_file: "{{ deployed_k8s_config_dir }}/kube-controller-manager.pem"
deployed_kube_controller_manager_key_file: "{{ deployed_k8s_config_dir }}/kube-controller-manager-key.pem"
deployed_front_proxy_client_pem_file: "{{ deployed_k8s_config_dir }}/front-proxy-client.pem"
deployed_front_proxy_client_key_file: "{{ deployed_k8s_config_dir }}/front-proxy-client-key.pem"

# deployed to both masters and nodes
deployed_cert_and_config_files:
 - src: "{{ ca_pem_file }}"
   dest: "{{ deployed_ca_pem_file }}"
   mode: "0664"
 - src: "{{ ca_key_file }}"
   dest: "{{ deployed_ca_key_file }}"
   mode: "0600"
 - src: "{{ k8s_pem_file }}"
   dest: "{{ deployed_k8s_pem_file }}"
   mode: "0664"
 - src: "{{ k8s_key_file }}"
   dest: "{{ deployed_k8s_key_file }}"
   mode: "0600"
 - src: "{{ encryption_config_file }}"
   dest: "{{ deployed_encryption_config_file }}"
   mode: "0600"
 - src: "{{ kube_scheduler_config_file }}"
   dest: "{{ deployed_kube_scheduler_config_file }}"
   mode: "0664"
 - src: "{{ kube_scheduler_kubeconfig_file }}"
   dest: "{{ deployed_kube_scheduler_kubeconfig_file }}"
   mode: "0664"
 - src: "{{ kube_controller_manager_kubeconfig_file }}"
   dest: "{{ deployed_kube_controller_manager_kubeconfig_file }}"
   mode: "0664"
 - src: "{{ kube_controller_manager_key_file }}"
   dest: "{{ deployed_kube_controller_manager_key_file }}"
   mode: "0600"
 - src: "{{ kube_controller_manager_pem_file }}"
   dest: "{{ deployed_kube_controller_manager_pem_file }}"
   mode: "0664"
 - src:  "{{ front_proxy_client_key_file }}"
   dest: "{{ deployed_front_proxy_client_key_file }}"
   mode: "0600"
 - src:  "{{ front_proxy_client_pem_file }}"
   dest: "{{ deployed_front_proxy_client_pem_file }}"
   mode: "0664"

auth_kubeconfigs:
   - name: "kube-proxy"
     server: "{{ localhost_lb_apiserver_address }}"
     config: "kube-proxy.kubeconfig"
     pem: "{{ kube_proxy_pem_file }}"
     key: "{{ kube_proxy_key_file }}"
     user: "kube-proxy"

   - name: "kube-controller-manager"
     server: "{{ master_api_localhost_url }}"
     config: "kube-controller-manager.kubeconfig"
     pem: "{{ kube_controller_manager_pem_file }}"
     key: "{{ kube_controller_manager_key_file }}"
     user: "system:kube-controller-manager"

   - name: "kube-scheduler"
     server: "{{ master_api_localhost_url }}"
     config: "kube-scheduler.kubeconfig"
     pem: "{{ kube_scheduler_pem_file }}"
     key: "{{ kube_scheduler_key_file }}"
     user: "system:kube-scheduler"

   - name: "admin"
     server: "{{ localhost_lb_apiserver_address }}"
     config: "admin.kubeconfig"
     pem: "{{ admin_pem_file }}"
     key: "{{ admin_key_file }}"
     user: "admin"

# master vars
master_ips_csv: "{% for m in groups['masters'] %}{{ hostvars[m].public_ip }}{% if not loop.last%},{% endif %}{% endfor %}"
master_fqdn_csv: "{% for m in groups['masters'] %}{{ hostvars[m].public_fqdn }}{% if not loop.last%},{% endif %}{% endfor %}"
master_api_localhost_url: "https://127.0.0.1:6443"

master_services:
 - display_name: "Kubernetes API Server"
   name: "kube-apiserver"
   url:  "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kube-apiserver"
   path: "/usr/local/bin/kube-apiserver"
   mode: "0775"
   service_j2: "{{ role_path }}/templates/kube-apiserver.service.j2"
   service_path: "{{ systemd_dir }}/kube-apiserver.service"

 - display_name: "Kubernetes Manager"
   name: "kube-controller-manager"
   url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kube-controller-manager"
   path: "/usr/local/bin/kube-controller-manager"
   mode: "0775"
   service_j2: "{{ role_path }}/templates/kube-controller-manager.service.j2"
   service_path: "{{ systemd_dir }}/kube-controller-manager.service"

 - display_name: "Kubernetes Scheduler"
   name: "kube-scheduler"
   url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kube-scheduler"
   path: "/usr/local/bin/kube-scheduler"
   mode: "0775"
   service_j2: "{{ role_path }}/templates/kube-scheduler.service.j2"
   service_path: "{{ systemd_dir }}/kube-scheduler.service"


# rbac configs
master_rbac_role:
  file: "{{ role_path }}/files/rbac-clusterrole.yaml"
  path: "{{ config_dir }}/rbac-clusterrole.yaml"

master_rbac_rolebind:
  file: "{{ role_path }}/files/rbac-clusterrolebind.yaml"
  path: "{{ config_dir }}/rbac-clusterrolebind.yaml"

# etcd
etcd_config_dir: "/etc/etcd/"
etcd_arch: "amd64"
etcd_file_name: "etcd-v{{ etcd_version }}-linux-{{ etcd_arch }}"
etcd_tar_name: "{{ etcd_file_name }}.tar.gz"
etcd_url: "https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version }}/{{ etcd_tar_name }}"
etcd_extracted_dir: "/tmp/{{ etcd_file_name }}"
etcd_port:
  client: 2379
  s2s: 2380
etcd_cluster_urls: "{% for e in groups['etcd'] %}{{ hostvars[e].inventory_hostname }}=https://{{ hostvars[e].public_ip }}:{{ etcd_port.s2s }}{% if not loop.last%},{% endif %}{% endfor %}"
master_etcd_cluster_urls: "{% for e in groups['etcd'] %}https://{{ hostvars[e].public_ip }}:{{ etcd_port.client }}{% if not loop.last%},{% endif %}{% endfor %}"

# calico
calico_etcd_endpoints: "{{ master_etcd_cluster_urls }}"
calico_veth_mtu: "1440" # hmmm
calico_manifest_config: "{{ config_dir }}/calico-etcd.yaml"
calico_rbac_config: "{{ config_dir }}/calico-v3.1-rbac.yaml"

# nodes
localhost_lb_apiserver_address: "https://127.0.0.1:6443"

kubelet_config_dir: "/var/lib/kubelet"
kubelet_kubeconfig_file: "{{ kubelet_config_dir }}/kubeconfig"
kubelet_config_file: "{{ kubelet_config_dir }}/kubelet-config.yaml"

kube_proxy_config_dir: "/var/lib/kube-proxy"
kube_proxy_kubeconfig_file: "{{ kube_proxy_config_dir }}/kubeconfig"
kube_proxy_config_file: "{{ kube_proxy_config_dir }}/kube-proxy-config.yaml"
kube_proxy_mode: "iptables"

node_binaries:
 - name: "kubelet"
   url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version}}/bin/linux/amd64/kube-proxy"
   path: "/usr/local/bin/kube-proxy"
   mode: "0775"

 - name: "kube-proxy"
   url: "https://storage.googleapis.com/kubernetes-release/release/v{{k8s_version}}/bin/linux/amd64/kubelet"
   path: "/usr/local/bin/kubelet"
   mode: "0775"

 - name: "runsc"
   url: "https://storage.googleapis.com/kubernetes-the-hard-way/runsc-50c283b9f56bb7200938d9e207355f05f79f0d17"
   path: "/usr/local/bin/runsc"
   mode: "0775"

 - name: "runc"
   url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
   path: "/usr/local/bin/runc"
   mode: "0775"

 - name: "kubectl"
   url: "https://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kubectl"
   path: "/usr/local/bin/kubectl"
   mode: "0775"

node_services:
 - name: "kube-proxy"
   service_j2: "{{ role_path }}/templates/kube-proxy.service.j2"
   service_path: "{{ systemd_dir }}/kube-proxy.service"
 - name: "kubelet"
   service_j2: "{{ role_path }}/templates/kubelet.service.j2"
   service_path: "{{ systemd_dir }}/kubelet.service"
 - name: "containerd"
   service_j2: "{{ role_path }}/templates/containerd.service.j2"
   service_path: "{{ systemd_dir }}/containerd.service"

node_configs:
 - name: "containerd"
   src: "{{ role_path }}/files/containerd-config.toml"
   dest: "/etc/containerd/config.toml"
 - name: "kubelet-config"
   src: "{{ role_path }}/templates/kubelet-config.yaml.j2"
   dest: "{{ kubelet_config_file }}"
 - name: "kube-proxy"
   src: "{{ role_path }}/templates/kube-proxy.yaml.j2"
   dest: "{{ kube_proxy_config_file }}"

node_archive_dependencies:
 - name: "crictl"
   url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ cri_tools_version }}/crictl-v{{ cri_tools_version }}-linux-amd64.tar.gz"
   dest: "/usr/local/bin/"
 - name: "cni-plugins"
   url: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
   dest: "/opt/cni/bin/"
 - name: "containerd"
   url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}.linux-amd64.tar.gz"
   dest: "/"

# registry
docker_io_mirror_endpoint: "https://registry.alta3.com"
